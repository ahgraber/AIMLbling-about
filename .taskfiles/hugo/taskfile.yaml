---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

env:
  REPO_DIR:
    sh: "git rev-parse --show-toplevel"

vars:
  HUGO_DIR: "{{ .REPO_DIR }}/hugo"
  CONTENT_DIR: "{{ .REPO_DIR }}/hugo/content"
  BLOG_DIR: "{{ .REPO_DIR }}/hugo/content/blog"

tasks:

  new:
    desc: Create a new draft post from template
    cmds:
      - git checkout -b blog/{{ .name }} main
      - hugo new content blog/{{ .name }}/index.md -s {{ .HUGO_DIR }}
      # NOTE: using gnu sed via nix; if using osx sed may have to use `sed -i ''`
      - |
        sed -i "/title: \"\"/c\title: '\{\{ title \"{{ .title }}\" \}\}'" {{ .HUGO_DIR }}/content/blog/{{ .name }}/index.md
    requires:
      vars: ['title']
    vars:
      name: '{{ or .title | lower | replace " " "-" }}'
    preconditions:
      - {msg: "Hugo not found", sh: "type hugo"}

  catchup:
    desc: Catch feature branch up to main
    cmds:
      - git stash # save any work-in-progress
      - git fetch origin main # update remote
      # - git merge --ff-only origin/main # fastforward
      - git rebase origin/main
      - git stash pop # restore work-in-progress

  publish:
    desc: Publish a draft post (set 'draft' to false and update the date)
    summary: |
      task hugo:publish path="<relative path to index.md>"
    cmds:
      # NOTE: using gnu sed via nix; if using osx sed may have to use `sed -i ''`
      - |
        sed -i '/draft: true/c\draft: false' {{ .path }}
      - |
        sed -i '/date: .*/c\date: {{ now.Format "2006-01-02" }}' {{ .path }}
      - echo "Commit this change, then branch is ready for PR!"
      # - task: _pull_request
    requires:
      vars: ["path"]
    preconditions:
      - {msg: "File not found", sh: "test -f {{ .path }}"}

  # _pull_request:
  #   desc: Create a pull request from a draft branch
  #   internal: true
  #   cmds:
  #     - gh pr create --title "Publish post - {{ .file }}" --body "Pull request body"
  #   # dotenv: [".env"]
  #   vars:
  #     file: '{{ or ( .file | lower | trimSuffix ".md") (fail "Variable `file` is required") }}'
  #   preconditions:
  #     - {msg: "github cli ('gh') not found", sh: "type gh"}
  #     - {msg: "Github auth not found.  Run `gh auth login --hostname github.com", sh: "gh auth status"}

  # build:
  #   desc: Build hugo image

  demo:
    desc: Serve the site (with drafts enabled)
    cmd: hugo server -D --disableFastRender -s {{ .HUGO_DIR }}
    preconditions:
      - {msg: "Hugo not found", sh: "type hugo"}

  clean:
    desc: Clean all rendered static site content
    cmds:
      - "[[ ! -d {{ .HUGO_DIR }}/public ]] || rm -r {{ .HUGO_DIR }}/public"
      - "[[ ! -d {{ .HUGO_DIR }}/resources ]] || rm -r {{ .HUGO_DIR }}/resources"
      - hugo --gc -S {{ .HUGO_DIR }}
    # cmd: nix build '.?submodules=1'
    preconditions:
      - {msg: "Hugo not found", sh: "type hugo"}

  _start:
    desc: Start colima
    internal: true
    cmd: colima start
    preconditions:
      - {msg: "Colima not found", sh: "type colima"}

  build:
    desc: Build site with colima/docker
    deps:
      - task: _start
        # silent: true
    cmds:
      - |
        docker build \
          -t ghcr.io/ahgraber/aimlbling-about:debug \
          -f {{ .HUGO_DIR }}/docker/Dockerfile \
          .
      - echo "Run 'colima stop' to clean up!"
    preconditions:
      - {msg: "Docker not found", sh: "type docker"}

  run:
    desc: Run colima/docker container
    deps:
      - task: _start
        # silent: true
    cmds:
      - docker run --rm -p 80:8080 ghcr.io/ahgraber/aimlbling-about:debug
      - echo "Access site at http://127.0.0.1"
      - echo "Run 'colima stop' to clean up!"
    preconditions:
      - {msg: "Docker not found", sh: "type docker"}

  treadmill:
    desc: Update treadmill data
    dir: "{{ .HUGO_DIR }}"
    cmds:
      - hugo mod get -u github.com/ahgraber/ai-treadmill
