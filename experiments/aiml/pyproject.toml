[project]
name = "aiml"
version = "0.0.1"
description = "Utilities for AI/ML experiments"
requires-python = ">=3.10, <3.13"
dependencies = [
  "ipython>=8.8",
  "ipywidgets>=8.1.5",
  "notebook>=7.3.1",
  "python-dateutil>=2.9.0.post0",
  "python-dotenv>=1.0.1",
  "typing-extensions>=4.12",
]

[dependency-groups]
dev = ["aiml[dev]"]
lint = ["aiml[lint]"]
test = ["aiml[test]"]

[project.optional-dependencies]
dev = ["hatchling>=1.26.3"]
lint = ["ruff>=0.8"]
test = ["coverage>=4.2", "pytest>=8.3.4", "pytest-asyncio>=0.24.0", "pytest-cov>=6.0.0"]
ds = [
  # ref: https://scientific-python.org/specs/spec-0000/
  "jinja2>=3.1",
  "joblib>=1.4",
  "networkx>3.1",
  "numpy>=1.26",
  "openpyxl>=3.1",
  "pandas>=2",
  "pydantic>=2",
  "python-dateutil>=2.9",
  "python-dotenv>=1.0",
  "pyyaml>=6.0.2",
  "scikit-learn>=1.3",
  "scipy>=1.12",
  "tabulate>=0.9.0",
  "xlrd>=2.0",
]
db = ["pyodbc>=5", "sqlalchemy>=2"]
plot = ["cmcrameri>=1.9", "matplotlib>=3.8", "mizani>=0.13", "plotly>=5.24", "plotnine>=0.14", "seaborn>=0.13"]
api = ["fastapi>=0.115.6", "uvicorn>=0.32.1"]
nlp = [
  # "fasttext>=0.9.3",
  "langcodes>=3.5",
  "lingua-language-detector>=2.0",
  "nltk>=3.9",
  "rouge-score>=0.1.2",
  "spacy>=3.7,<4",
]
torch = [
  "tensorboard>=2.18",
  "torch>=2",
  "torchaudio>=2",
  "torchdata>=0.10",
  "torchmetrics>=1.6",
  "torchtext>=0.16",
  "torchvision>=0.16",
]
transformers = [
  "accelerate>=1.2.0",
  "datasets>=3.2.0",
  "huggingface-hub>=0.23",
  "safetensors>=0.4.5",
  "sentence-transformers>=3.3.1",
  "sentencepiece>=0.2.0",
  "text-generation>=0.7.0",
  "tokenizers>=0.20,<1",
  "transformers>=4.46,<5",
]
langchain = [
  "langchain>=0.3",
  "langchain-anthropic>=0.3.0",
  "langchain-community>=0.3",
  "langchain-experimental>=0.3.3",
  "langchain-huggingface>=0.1.2",
  "langchain-openai>=0.2",
  "langchain-text-splitters>=0.3",
  "langchain-together>=0.2.0",
  "langchain-voyageai>=0.1.3",
]
llm = [
  # "aisuite[all]>=0.1.6",
  "anthropic",                     #>=0.30",
  "bert-score>=0.3.13",
  "bm25s>=0.2.5",
  "dspy-ai>=2.5",
  "jiter>=0.8",
  "json-repair>=0.30",
  "openai>=1.57",
  "openapi-core>=0.19",
  "openapi-schema-validator>=0.6",
  "outlines>=0.1.10",
  "pydantic-ai>=0.0.2",
  "ragas>=0.2",
  "semantic-kernel>=1.17",
  "tenacity>=8.5",
  "tiktoken>=0.8",
  "together>=1.3.5",
  "unstructured>=0.16",
  "voyageai>=0.3.2",
]
llamaindex = [
  "llama-index-agent-openai>=0.4",
  "llama-index>=0.11,<0.13",
  "llama-index-embeddings-huggingface>=0.4",
  "llama-index-embeddings-openai>=0.3",
  "llama-index-embeddings-together>=0.3",
  "llama-index-embeddings-voyageai>=0.3",
  "llama-index-llms-anthropic>=0.5",
  "llama-index-llms-huggingface>=0.4",
  "llama-index-llms-huggingface-api>=0.3",
  "llama-index-llms-openai-like>=0.3",
  "llama-index-llms-together>=0.3",
  "llama-index-program-openai>=0.3",
  "llama-index-question-gen-openai>=0.3",
  "llama-index-readers-file>=0.4",
  "llama-index-readers-llama-parse>=0.4",
  "llama-index-retrievers-bm25>=0.5",
  "llama-index-vector-stores-duckdb>=0.3",
]
lint = ["ruff>=0.8"]

[tool.uv]
package = true
default-groups = ["dev", "test"]

# --- build-system -----------------------------------------------------------
# ref: https://packaging.python.org/en/latest/tutorials/packaging-projects/
# these should match the "setup-requires" packages in `setup.cfg`
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# ref: https://hatch.pypa.io/1.2/version/#configuration
[tool.hatch.version]
path = "./src/VERSION"
pattern = "^(?P<version>.+?)(\n)"

[tool.hatch.build]
only-include = ["./src/VERSION", "./src/aiml", "tests"]
skip-excluded-dirs = true
# sources = ["src"]

[tool.hatch.build.targets.sdist]

[tool.hatch.build.targets.wheel]
packages = ["src/aiml"]
macos-max-compat = true

# --- pytest -----------------------------------------------------------------
# ref: https://docs.pytest.org/en/7.3.x/reference/customize.html
[tool.pytest.ini_options]
addopts = '''
    -ra
    --strict-markers
    --ignore=docs/conf.py
    --ignore=setup.py
    --ignore=ci
    --ignore=.eggs
    --import-mode=importlib
    --tb=short
'''
# --doctest-modules
# --doctest-glob=\*.rst
norecursedirs = [
  ".env",
  ".git",
  ".nox",
  ".pytest_cache",
  ".tox",
  "__pycache__",
  "dist",
  "docs",
  "build",
  "migrations",
  "notebooks",
  "writeup",
]
python_files = ["test_*.py", "*_test.py", "tests.py"]
pythonpath = "src"
testpaths = ["tests"]
# log_cli = true

# --- coverage ---------------------------------------------------------------
[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
show_missing = true
